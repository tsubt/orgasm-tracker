import { CheckCircleIcon, XCircleIcon } from "@heroicons/react/24/solid";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { useEffect, useRef, useState } from "react";
import { Spinner } from "../../components/Loaders";
import { trpc } from "../../utils/trpc";

export default function AccountSettingsPage() {
  const { status: sessionStatus } = useSession();
  const { data: userSettings } = trpc.settings.get.useQuery();

  const [newUsername, setNewUsername] = useState(userSettings?.username || "");
  const [newUsernameOK, setNewUsernameOK] = useState<
    "ok" | "taken" | "checking" | "invalid" | "empty"
  >(newUsername === "" ? "empty" : "ok");

  const profilePublic = useRef<HTMLInputElement>(null);
  const profilePrivate = useRef<HTMLInputElement>(null);
  const [newVisibility, setNewVisibility] = useState<"public" | "private">(
    userSettings?.publicOrgasms || false ? "public" : "private"
  );

  const { status: checkStatus, data: checkUsername } =
    trpc.settings.checkUsername.useQuery({
      username: newUsername,
    });

  useEffect(() => {
    setNewUsername(userSettings?.username || "");
    setNewVisibility(
      userSettings?.publicOrgasms || false ? "public" : "private"
    );
  }, [userSettings]);

  useEffect(() => {
    // check if username is available
    if (newUsername === "") {
      setNewUsernameOK("empty");
      return;
    }
    if (newUsername === userSettings?.username) {
      setNewUsernameOK("ok");
      return;
    }
    if (newUsername.length < 3) {
      setNewUsernameOK("invalid");
      return;
    }

    if (checkStatus === "loading") {
      setNewUsernameOK("checking");
      return;
    }

    setNewUsernameOK(checkUsername ? "ok" : "taken");
  }, [newUsername, checkStatus, checkUsername, userSettings]);

  const context = trpc.useContext();
  const { mutate: updateSettings, status: updateStatus } =
    trpc.settings.update.useMutation({
      onSuccess: async () => {
        await context.settings.get.invalidate();
        await context.users.invalidate();
      },
    });
  const saveSettings = async () => {
    if (newUsernameOK !== "ok" && newUsernameOK !== "empty") return;
    updateSettings({
      username: newUsername,
      publicOrgasms: newVisibility === "public",
    });
  };

  if (sessionStatus === "unauthenticated") return <>Please sign in</>;
  if (sessionStatus === "loading")
    return (
      <div className="my-24">
        <Spinner />
      </div>
    );

  return (
    <>
      <Head>
        <title>OrgasmTracker | Account Settings</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16">
        <h2 className="text-lg font-bold uppercase tracking-wider text-white">
          Account Settings
        </h2>

        <div className="grid w-full max-w-3xl grid-cols-3 gap-8 text-white">
          <h3 className="text-right text-lg font-bold">Username</h3>

          <div className="col-span-2 flex flex-col gap-2">
            <div className="flex items-center gap-2">
              <input
                type="text"
                value={newUsername}
                onChange={(e) => setNewUsername(e.target.value)}
                placeholder="No username set"
                className="rounded bg-pink-200 p-1 px-3 text-pink-900  accent-pink-900 placeholder:italic placeholder:text-red-500"
              />
              {newUsernameOK === "ok" ? (
                <div className="flex items-center gap-2 text-xs text-green-300">
                  <CheckCircleIcon className="ml-2 h-6 w-6 text-green-500" />
                  Username available!
                </div>
              ) : newUsernameOK === "taken" ? (
                <div className="flex items-center gap-2 text-xs text-red-300">
                  <XCircleIcon className="ml-2 h-6 w-6 text-red-300" />
                  Username taken
                </div>
              ) : newUsernameOK === "checking" ? (
                <div className="flex items-center gap-2 text-xs text-red-300">
                  <Spinner size={3} />
                </div>
              ) : newUsernameOK === "invalid" ? (
                <div className="flex items-center gap-2 text-xs text-red-300">
                  <XCircleIcon className="ml-2 h-6 w-6 text-red-300" />
                  Username must be at least 3 characters
                </div>
              ) : (
                <></>
              )}
            </div>
            <p className="text-sm">
              If your username is blank, your profile will not be visible to
              anyone.
            </p>
          </div>

          <h3 className="text-right text-lg font-bold">Profile visibility</h3>

          <div className="col-span-2 flex flex-col gap-2">
            <div className="flex items-center gap-2">
              <input
                type="radio"
                name="visibility"
                id="public"
                ref={profilePublic}
                checked={newVisibility === "public"}
                onChange={() => setNewVisibility("public")}
                disabled={newUsernameOK !== "ok"}
              />
              <label htmlFor="public">Public</label>
              <input
                type="radio"
                name="visibility"
                id="private"
                ref={profilePrivate}
                checked={newVisibility === "private"}
                onChange={() => setNewVisibility("private")}
                disabled={newUsernameOK !== "ok"}
              />
              <label htmlFor="private">Private</label>
            </div>
            <p className="text-sm">
              Once you have chosen a username, you can make your profile public.
              This will allow you to share your orgasm history with others!
            </p>
            {userSettings?.username && userSettings?.publicOrgasms && (
              <p>
                Profile is available at:
                <Link
                  href={`https://otrack.online/u/${userSettings.username}`}
                  className="inline px-2 text-blue-200"
                >
                  {`https://otrack.online/u/${userSettings.username}`}
                </Link>
              </p>
            )}
          </div>

          <div className="col-span-3 flex items-center justify-end">
            {/* save button */}

            {(newUsernameOK === "ok" || newUsernameOK === "empty") &&
            updateStatus === "loading" ? (
              <div className="flex justify-end">
                <Spinner />
              </div>
            ) : (
              <button
                onClick={() => saveSettings()}
                className="rounded-lg bg-white p-2 px-4 font-bold text-pink-600"
              >
                Save
              </button>
            )}
          </div>
        </div>
      </div>
    </>
  );
}
