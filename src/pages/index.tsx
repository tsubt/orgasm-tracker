import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";

import OrgasmChart from "../components/OrgasmChart";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>OrgasmTracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-pink-700 to-pink-900">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Orgasm Tracker
          </h1>

          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
          </div>
          <div className="text-lg">
            <OrgasmCount />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

const OrgasmCount: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: userOrgasms } = trpc.orgasms.getUserOrgasms.useQuery(
    undefined,
    { enabled: sessionData?.user !== undefined }
  );

  const context = trpc.useContext();

  const { mutate: addUserOrgasm } = trpc.orgasms.addUserOrgasm.useMutation({
    onSuccess: () => {
      context.orgasms.getUserOrgasms.invalidate();
    },
  });

  const addOrgasm = () => {
    if (!sessionData) return;
    const datetime = new Date();
    const date = datetime.toISOString().slice(0, 10);
    const time = datetime.toISOString().slice(11, 19);

    addUserOrgasm({ date, time });
  };

  console.log(userOrgasms);

  return (
    <div className="flex flex-col items-center justify-center gap-4 text-white">
      <div className="text-center">
        {userOrgasms ? (
          <OrgasmChart orgasms={userOrgasms} />
        ) : (
          <a>Sign in to track orgasm</a>
        )}
      </div>
      {sessionData && (
        <button
          className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
          onClick={addOrgasm}
        >
          I&apos;ve had an orgasm!
        </button>
      )}
    </div>
  );
};
