import type { NextPage } from "next";
import Head from "next/head";
import { signIn, useSession } from "next-auth/react";

import { motion } from "framer-motion";

import { trpc } from "../utils/trpc";

import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
dayjs.extend(utc);

import OrgasmChart from "../components/OrgasmChart";
import { useRef, useState } from "react";
import { Spinner } from "../components/Loaders";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>OrgasmTracker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container flex flex-col items-center gap-12 px-4 py-16">
        <div className="flex flex-col items-center gap-2">
          <AuthShowcase />
        </div>
        <div className="w-full text-lg">
          <OrgasmCount />
        </div>
      </div>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  if (!sessionData) {
    return (
      <div className="flex flex-col items-center gap-8">
        <p className="text-center text-2xl text-white">
          Welcome to OrgasmTracker
        </p>
        <p className="text-white">Please sign in to continue</p>
        <button
          className="rounded-md bg-pink-800 px-4 py-2 text-white shadow hover:bg-pink-900"
          onClick={() => signIn("google")}
        >
          Sign in with Google
        </button>
      </div>
    );
  }

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        <span>Welcome {sessionData.user?.name}</span>
      </p>
      <p className="text-white">Here&apos;s your dashboard</p>
    </div>
  );
};

const OrgasmCount: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: userOrgasms, isLoading } = trpc.orgasms.getUserOrgasms.useQuery(
    undefined,
    { enabled: sessionData?.user !== undefined }
  );

  const [newOrgasm, setNewOrgasm] = useState(false);
  const dateRef = useRef<HTMLInputElement>(null);
  const timeRef = useRef<HTMLInputElement>(null);
  const typeRef = useRef<HTMLSelectElement>(null);
  const noteRef = useRef<HTMLTextAreaElement>(null);
  const { data: orgasmTypes } = trpc.orgasms.types.useQuery();

  const context = trpc.useContext();

  const { mutate: addUserOrgasm } = trpc.orgasms.addUserOrgasm.useMutation({
    onSuccess: async () => {
      await context.orgasms.getUserOrgasms.invalidate();
      setNewOrgasm(false);
    },
  });

  const addOrgasm = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!sessionData) return;
    const today = dayjs.utc().local();
    const date = dateRef.current?.value || today.format("YYYY-MM-DD");
    const time = timeRef.current?.value || today.format("HH:mm");
    const note = noteRef.current?.value || null;

    addUserOrgasm({ date, time, note });
  };

  if (!sessionData) return <></>;

  return (
    <div className="flex flex-col items-center justify-center gap-4  text-white">
      <div className="w-full  text-center">
        {userOrgasms ? (
          <OrgasmChart orgasms={userOrgasms} />
        ) : isLoading ? (
          <Spinner />
        ) : (
          <a>Sign in to track orgasm</a>
        )}
      </div>
      {sessionData && (
        <button
          className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
          onClick={() => setNewOrgasm(true)}
        >
          I&apos;ve had an orgasm!
        </button>
      )}

      {newOrgasm && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="fixed top-0 left-0 flex h-screen w-screen items-center justify-center bg-black bg-opacity-40"
        >
          <motion.div
            initial={{ opacity: 0, scale: 0.9, originX: 0.5, originY: 0.5 }}
            animate={{ opacity: 1, scale: 1, transition: { delay: 0.1 } }}
            className="flex flex-col gap-4 rounded-lg bg-white p-4 text-black shadow-xl"
          >
            <h4 className="text-lg text-black">
              When did you have this orgasm?
            </h4>

            <form onSubmit={addOrgasm} className="flex flex-col gap-2">
              <div className="flex flex-col gap-2 lg:grid lg:grid-flow-col lg:grid-rows-2 lg:items-center lg:gap-x-8">
                <label
                  htmlFor="orgasmDate"
                  className="text-sm font-bold uppercase"
                >
                  Date
                </label>
                <input
                  type="date"
                  ref={dateRef}
                  defaultValue={dayjs.utc().local().format("YYYY-MM-DD")}
                />

                <label
                  htmlFor="orgasmTime"
                  className="text-sm font-bold uppercase"
                >
                  Time
                </label>
                <input
                  type="time"
                  min="00:00:00"
                  max="24:00:00"
                  pattern="[0-9]{2}:[0-9]{2}"
                  ref={timeRef}
                  defaultValue={dayjs.utc().local().format("HH:mm")}
                />
              </div>

              {/* orgasm type */}
              {orgasmTypes && orgasmTypes.length > 0 && (
                <>
                  <label
                    htmlFor="orgasmType"
                    className="text-sm font-bold uppercase"
                  >
                    Type
                  </label>
                  <select
                    name="orgasmType"
                    id="orgasmType"
                    className="border bg-white p-2 text-sm outline-none"
                    ref={typeRef}
                  >
                    {orgasmTypes.map((type) => (
                      <option key={type.id} value={type.id}>
                        {type.name}
                      </option>
                    ))}
                    <option value="other"></option>
                  </select>
                </>
              )}

              <label
                htmlFor="orgasmNote"
                className="text-sm font-bold uppercase"
              >
                Notes
              </label>
              <textarea
                name="orgasmNote"
                id="orgasmNote"
                className="border p-2 text-sm outline-none"
                placeholder="Details you'd like to remember"
                ref={noteRef}
                rows={4}
              />

              <div className="mt-2 flex justify-between border-t px-4 pt-4">
                <button type="button" onClick={() => setNewOrgasm(false)}>
                  Cancel
                </button>
                <button type="submit">Save</button>
              </div>
            </form>
          </motion.div>
        </motion.div>
      )}
    </div>
  );
};
